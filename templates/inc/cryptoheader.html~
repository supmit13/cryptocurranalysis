<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- The above 4 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <script language='JavaScript' type="text/javascript" src='static/scripts/analysis.js'></script>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=utf-8" />
    <meta http-equiv="CACHE-CONTROL" content="NO-CACHE">
    <meta http-equiv="PRAGMA" content="NO-CACHE">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <!-- Title -->
    <title>CryptoCurry - Cryptocurrency Analysis &amp; Trading Platform</title>

    <!-- Favicon -->
    <link rel="icon" href="static/iface_resources/img/core-img/favicon.ico">

    <!-- Core Stylesheet -->
    <link rel="stylesheet" href="static/iface_resources/style.css">
    <style>
	.semitrans {
	  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=90)";
	  filter: alpha(opacity=90);
	  opacity: 0.9;
	  -moz-opacity: .90; 
	  -khtml-opacity: 0.9;
	  background-color:#669999;
	  color:#FFFFFF;
	  position:absolute; top:250px; left:100px; width:80%; height:150%; text-align:left; vertical-align:middle;padding-left:25px;padding-top:35px;padding-right:50px;
	}

	.semitrans2 {
	  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=90)";
	  filter: alpha(opacity=90);
	  opacity: 0.9;
	  -moz-opacity: .90; 
	  -khtml-opacity: 0.9;
	  background-color:#669999;
	  color:#FFFFFF;
	  position:absolute; top:250px; left:100px; width:80%; height:25%; text-align:left; vertical-align:middle;padding-left:25px;padding-top:35px;padding-right:50px;
	}
    </style>
    <!-- <script type="text/javascript" src="https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1.1','packages':['line']}]}"></script> -->
    <script type='text/javascript'>
        google.charts.load('current', {'packages':['line']});
        //google.charts.setOnLoadCallback(drawChart);



function drawChart_old(data){
      data = JSON.parse(data);
      datadict = data["datadict"];
      //datadict = datadict;
      plotname = data["plotname"];
      colors = data["colors"];
      plotareadiv = document.getElementById('plotnamearea');
      plotareadiv.innerHTML = ""; // Remove if something was written previously.
      plotareadiv.innerHTML = plotname;
      //alert(plotname);
      currencynames = data["currencynames"];
      //alert(currencynames);
      //var data;
      //alert(datadict);
      datalists = [];
      datacurr = [];
      currlist = new Array();
      headers = ["Datetime", "EOS", "BITCOIN", "BINANCE COIN", "BITCOIN SV", "XRP", "TETHER", "STELLAR", "BITCOIN CASH", "ETHEREUM"];
      
      maxdate = new Date("01-01-1970 00:00");
      ctr = 0;
      var plotdata = new google.visualization.DataTable();
      ////plotdata.addColumn('string', 'Currency');
      //plotdata.addColumn('datetime', 'Datetime');
      plotdata.addColumn('string', 'Datetime');
      ////plotdata.addColumn('number', 'Value');
      listedcurrencies = new Array("EOS", "BITCOIN", "BINANCE COIN", "BITCOIN SV", "XRP", "TETHER", "STELLAR", "BITCOIN CASH", "ETHEREUM");
      plotdata.addColumn('number', "EOS");
      plotdata.addColumn('number', "BITCOIN");
      plotdata.addColumn('number', "BINANCE COIN");
      plotdata.addColumn('number', "BITCOIN SV");
      plotdata.addColumn('number', "XRP");
      plotdata.addColumn('number', "TETHER");
      plotdata.addColumn('number', "STELLAR");
      plotdata.addColumn('number', "BITCOIN CASH");
      plotdata.addColumn('number', "ETHEREUM");
      //alert(plotdata.length);
      elements = {};
      dictoflists = {'datetime' : new Array(), 'values' : new Array()};
      for(k in datadict){
	elements[k] = dictoflists;
      }
      currencydatetimedict = {};
      //alert(datadict);
      for(k in datadict){
	//alert(k);
	 currlist.push(k);
         currencydatetimedict[k.toUpperCase()] = {};
	 elements[k] = {};
	 //alert(datadict[k].length);
	 listctr = 0;
	 strdatelist = new Array();
         for(i=0;i < datadict[k].length; i++){
	  ctrj = 1;
	  for(j in datadict[k][i]){
	     datetimeparts = j.split(" ");
 	     dateparts = datetimeparts[0].split("-");
	     mm = parseInt(dateparts[1]) - 1;
	     if((parseInt(dateparts[1]) - 1).toString().length < 2){
		mm = '0' + mm;
	     }
	     else{
		mm = (parseInt(dateparts[1]) - 1).toString();
	     }
	     if((dateparts[0]).toString().length < 2){
		dateparts[0] = '0' + dateparts[0];
	     }
	     else{
		dateparts[0] = dateparts[0].toString();
	     }
	     strdate = dateparts[2] + "-" + mm + "-" + dateparts[0] + " " + datetimeparts[1];
	     date = new Date(strdate);
             if(date > maxdate){
		maxdate = date
	     }
	     val = datadict[k][i][j];
             timeparts = datetimeparts[1].split(":");
	     strdateforcurr = "";
	     if(timeparts.length > 1){
             	mnsec = timeparts[0] + ":" + timeparts[1];
		strdateforcurr = dateparts[2] + "-" + mm + "-" + dateparts[0] + " " + mnsec;
	     }
	     else{
		mnsec = "";
		strdateforcurr = dateparts[2] + "-" + mm + "-" + dateparts[0];
	     }
	     if(!currencydatetimedict[k.toUpperCase()][strdateforcurr]){
	         currencydatetimedict[k.toUpperCase()][strdateforcurr] = val;
	     }
	     else{
		continue;
	     }
	     strdatelist.push(strdateforcurr);
	     listctr++;
	     //alert(strdateforcurr + " is for curr value");
	     datalists[ctrj] = [k, strdate, parseFloat(val)];
	     ctrj += 1;
	  }
	 }
	 datacurr[ctr] = new Array();
	 for(h=1;h < datalists.length;h++){
	   datacurr[ctr][h-1] = new Array(datalists[h]);
	 }
	 ctr += 1;
	 //alert(datalists);
	 //var plotdata = google.visualization.arrayToDataTable(datalists);
      //alert(datacurr);
      lctr = 0;
      for(i=0; i < currlist.length; i++){
	//alert(datacurr[i]);
	datalist = new Array();
	for(dctr=0; dctr < 3; dctr++){
	    datalist[dctr] = datacurr[i][dctr];
	    //alert(datalist[dctr]);
	}
	if(datalist.length < 3){
	    //alert(datalist.length);
	    if(i == 0){
		datalist.push(datalist[datalist.length - 1]);
	    }
	    else{
	    	datalist.push(datacurr[i-1][2]); // Populate the missing value with the previous value.
	    }
	}
	else{
	  while(datalist.length >= 3){
	    //alert(datalist.length);
	    datalist.pop();
	  }
	}
	//alert(datalist[0]);
	
	datalistparts = String(datalist[0]).split(',');
	elem = new Array(3);
	curr = "";
	date = "";
	val = "";
	strdate = "";
        for(elemctr = 0; elemctr < 3; elemctr++){
	    if(elemctr == 1){
		datetimeparts = datalistparts[elemctr].split(" ");
	        dateparts = datetimeparts[0].split("-");
		timeparts = datetimeparts[1].split(":");
		dd = parseInt(dateparts[0]);
		mm = parseInt(dateparts[1]);
		yyyy = parseInt(dateparts[2]);
		hh = parseInt(timeparts[0]);
		mn = parseInt(timeparts[1]);
		strdate = yyyy + "-" + mm + "-" + dd + " " + hh + ":" + mn;
		
		elem[elemctr] = new Date(yyyy, mm, dd, hh,mn);
		//elem[elemctr] = datalistparts[elemctr]
		//alert(elem[elemctr]);
		date = elem[elemctr];
	    }
	    else if(elemctr == 2){
	    	elem[elemctr] = parseFloat(datalistparts[elemctr]);
		//alert(elem[elemctr]);
		val = elem[elemctr];
	    }
	    else{
		elem[elemctr] = datalistparts[elemctr];
		//alert(elem[elemctr]);
		curr = elem[elemctr];
	    }
	}
	ddict = elements[curr];
	dtlist = ddict['datetime'];
	//dtlist.push(date);
	vals = ddict['values'];
	//vals.push(val);
	elements[curr]['datetime'] = dtlist;
	elements[curr]['values'] = vals;
	try{
	  for (cname in listedcurrencies){
	    if(listedcurrencies[cname].toUpperCase() != curr.toUpperCase()){
		continue;
	    }
	    currindex = cname;
	    drow = new Array();
	    //alert(date);
	    //drow.push(date);
	    if(lctr < listctr){
	        newstrdate = strdatelist[lctr];
		lctr++;
	    }
	    drow.push(newstrdate);
	    prevvalues = new Array(listedcurrencies.length);
	    for(f=0;f < listedcurrencies.length;f++){
		prevvalues[f] = 0.0;
	    }
	    for(cnctr=0;cnctr < listedcurrencies.length; cnctr += 1){
		if(currindex != cnctr){
		    //alert(newstrdate + " is strdate");
		    //alert(currencydatetimedict[listedcurrencies[cname].toUpperCase()]);
		    if(currencydatetimedict[listedcurrencies[cname].toUpperCase()] && currencydatetimedict[listedcurrencies[cname].toUpperCase()][newstrdate] && currencydatetimedict[listedcurrencies[cname].toUpperCase()][newstrdate] > 0.0 && drow.length < listedcurrencies.length){
			prevvalues[cnctr] = currencydatetimedict[listedcurrencies[cname].toUpperCase()][newstrdate];
			drow.push(parseFloat(currencydatetimedict[listedcurrencies[cname].toUpperCase()][newstrdate]));
			//alert(currencydatetimedict[listedcurrencies[cname].toUpperCase()][newstrdate] + " is value of " + listedcurrencies[cname]);
		    }
		    else{
			drow.push(parseFloat(prevvalues[cnctr]));
		   	//alert(newstrdate + " is strdate");
		    }
		}
		else{
		    drow.push(parseFloat(val));
		    prevvalues[cnctr] = val;
		    //alert(val.toString() + " is val value");
		}
	    }
	  }
	  plotdata.addRow(drow);
	  //alert(plotdata.length.toString() + " is plotdata length");
	}
	catch(err){
	  alert("Could not add in plotdata - " + err + " - " + String(elements.length));
	}
	//color = colors[i];
        //alert(color);
	//alert(plotdata);
        var options = {
  	title: plotname + " -- " + currlist.join(", "),
  	curveType: "function",
  	legend: { position: "bottom" },
	colors: colors,
	width: 900,
        height: 500,
        hAxis: {
	    viewWindow: {
            min: new Date(2019, 0, 01, 30),
            max: maxdate
            },
	    format: 'dd-MM-yyyy hh:mm',
            gridlines: {count: 15}
        },
        vAxis: {
            gridlines: {color: 'blue'},
            minValue: 0
        }
      };
      //alert(elements[2]);
      //var chart = new google.visualization.LineChart(document.getElementById("plotimage"));
      var chart = new google.charts.Line(document.getElementById("plotimage"));
      }
      					
      try{
	chart.draw(plotdata, options);
      //  chart.draw(plotdata, google.charts.Line.convertOptions(options));
      }
      catch(err){ // Some data will be invalid, you can't do a fuck with it.
        alert("NOT PLOTTING - " + err);
      }
      }
    }


function drawChart(data){
      dataparsed = JSON.parse(data);
      datadict = dataparsed["datadict"];
      plotname = dataparsed["plotname"];
      colors = dataparsed["colors"];
      datetimeslist = dataparsed["datetimeslist"];
      plotareadiv = document.getElementById('plotnamearea');
      plotareadiv.innerHTML = ""; // Remove if something was written previously.
      plotareadiv.innerHTML = plotname;
      currencynames = dataparsed["currencynames"];
      var keys = Object.keys(datadict);
      datalists = [];
      datacurr = [];
      currlist = new Array();
      pltarea = document.getElementById("plotimage");
      pltarea.innerHTML = "It might take a little while to plot your chart. Please be patient.";
      headers = ["Datetime", "EOS", "BITCOIN", "BINANCE COIN", "BITCOIN SV", "XRP", "TETHER", "STELLAR", "BITCOIN CASH", "ETHEREUM", "MONERO"];
      maxdate = new Date("01-01-1970 00:00");
      ctr = 0;
      var plotdata = new google.visualization.DataTable();
      ////plotdata.addColumn('string', 'Currency');
      //plotdata.addColumn('datetime', 'Datetime');
      plotdata.addColumn('string', 'Datetime');
      ////plotdata.addColumn('number', 'Value');
      listedcurrencies = new Array("EOS", "BITCOIN", "BINANCE COIN", "BITCOIN SV", "XRP", "TETHER", "STELLAR", "BITCOIN CASH", "ETHEREUM", "MONERO");
      plotdata.addColumn('number', "EOS");
      plotdata.addColumn('number', "BITCOIN");
      plotdata.addColumn('number', "BINANCE COIN");
      plotdata.addColumn('number', "BITCOIN SV");
      plotdata.addColumn('number', "XRP");
      plotdata.addColumn('number', "TETHER");
      plotdata.addColumn('number', "STELLAR");
      plotdata.addColumn('number', "BITCOIN CASH");
      plotdata.addColumn('number', "ETHEREUM");
      plotdata.addColumn('number', "MONERO");

      datastack = new Object();
	currencyindices = Object.keys(datadict)
        for(currencyindex in currencyindices){
	    currencyname = currencyindices[currencyindex];
	    curvalslist = datadict[currencyname];
	    for (entry in curvalslist){
		//alert(JSON.stringify(curvalslist[entry]));
		date = Object.keys(curvalslist[entry])[0];
		value = Object.values(curvalslist[entry])[0];
		//alert(date + "  " + value);
		    if(datastack[date]){
			datarow = new Array(keys.length); // Just so that javascript is satisfied, as this will be overruled.
			datarow = datastack[date];
			for(j=0;j < listedcurrencies.length; j++){
			    if(currencyname.toUpperCase() == listedcurrencies[j]){
				datarow[j+1] = parseFloat(value);
				datastack[date] = datarow;
				break;
			    }
			}
		    }
		    else{
			datastack[date] = new Array();
			datarow = new Array(keys.length);
			datarow[0] = date;
			for(j=0;j < listedcurrencies.length; j++){
			    if(currencyname.toUpperCase() == listedcurrencies[j]){
				datarow = new Array(keys.length);
				datarow[0] = date;
				datarow[j + 1] = parseFloat(value);
				datastack[date] = datarow;
				break;
			    }
			}
		    }
	    }

	}
        for(datetimeval in datetimeslist){
	    datar = datastack[datetimeslist[datetimeval]]
	    if(datar.length != keys.length){
		console.log(datar.length);
		continue;
	    }
	    plotdata.addRow(datar);
	}
	var options = {
  	title: plotname + " -- " + listedcurrencies.join(", "),
  	curveType: "function",
  	legend: { position: "bottom" },
	colors: colors,
	width: 900,
        height: 500,
        hAxis: {
	    viewWindow: {
            min: new Date(2019, 0, 01, 30),
            max: maxdate
            },
	    format: 'dd-MM-yyyy hh:mm',
            gridlines: {count: 15}
        },
        vAxis: {
            gridlines: {color: 'blue'},
            minValue: 0
        }
      };
      //var chart = new google.visualization.LineChart(document.getElementById("plotimage"));
      pltarea.innerHTML = "";
      var chart = new google.charts.Line(document.getElementById("plotimage"));
      try{
	  chart.draw(plotdata, options);
      //  chart.draw(plotdata, google.charts.Line.convertOptions(options));
      }
      catch(err){ // Some data will be invalid, you can't do a fuck with it. 
        //(Ummmmm.... please excuse my language, sometimes I behave that way, especially when I am irritated).
        alert("NOT PLOTTING - " + err);
      }

}


function displayplots(indexval, urlprefix){
    selectbox = document.getElementById(indexval);
    selectedvalue = selectbox.value;
    //alert(indexval);
    //alert(selectedvalue);
    postdata = "csrfmiddlewaretoken=" + document.cryptoanalysis.csrfmiddlewaretoken.value;
    plotdiv = document.getElementById('plotimage');
    var xmlhttp;
    if (window.XMLHttpRequest){
        xmlhttp=new XMLHttpRequest();
    }
    else{
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
    }
    //alert(postdata);
    xmlhttp.onreadystatechange = function(){
        if(xmlhttp.readyState == 4 && xmlhttp.status==200){
	    plotdiv.style.display = "block";
	    //plotdiv.innerHTML = "";
	    waittag = document.getElementById('waitprocess');
 	    waittag.parentNode.removeChild(waittag);
	    //imgtag = document.createElement('img');
	    //imgtag.setAttribute('src', xmlhttp.responseText);
	    //plotdiv.appendChild(imgtag);
	    //alert("calling drawchart");
	    data = xmlhttp.responseText;
	    drawChart(data);
        }
    };
    posturl = urlprefix + "/cryptocurry/analyze/visual/" + indexval + "/" + selectedvalue + "/";
    alert(posturl);
    xmlhttp.open('POST', posturl, true);
    xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    xmlhttp.setRequestHeader("X-CSRFToken", document.cryptoanalysis.csrfmiddlewaretoken.value);
    //alert(posturl);
    plotdiv.style.display = "block";
    imgtag = document.createElement('img');
    imgtag.setAttribute('src', 'static/images/loading_big.gif');
    imgtag.setAttribute('id', 'waitprocess');
    imgtag.setAttribute('title', 'This may take a while depending on the amount of data it needs to crunch. Please be patient.');
    plotdiv.appendChild(imgtag);
    xmlhttp.send(postdata);
}

    </script>

</head>

<body>
    <!-- ##### Preloader ##### -->
    <div id="preloader">
        <i class="circle-preloader"></i>
    </div>

    <!-- ##### Header Area Start ##### -->
    <header class="header-area">

        <!-- Top Header Area -->
        <div class="top-header">
            <div class="container h-100">
                <div class="row h-100">
                    <div class="col-12 h-100">
                        <div class="top-header-content h-100 d-flex align-items-center justify-content-between">
                            <!-- Top Headline -->
                            <div class="top-headline">
                                <p>Welcome to <span>CryptoCurry</span></p>
                            </div>
                            <!-- Top Login & Faq & Earn Monery btn -->
                            <div class="login-faq-earn-money">
                                <a href="#" onClick='javascript:showloginscreen("{{urlprefix}}");'>Login&nbsp;&nbsp;</a> | <a href="#" onClick='javascript:showregisterscreen("{{urlprefix}}");'>Register<br /></a>
                                <a href="#">FAQ</a>
                                <a href="#" class="active">Trade</a>
				<div id='logindiv' class='semitrans' style='display:none'></div>
				<div id='registerdiv' class='semitrans' style='display:none'></div>
                            </div>
			    <div id='plotnamearea'></div> 
                        </div>
                    </div>
                </div>
            </div>
        </div>
